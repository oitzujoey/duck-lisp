comptime print "<comptime library.hna>\n"
print "<library.hna>\n"

(declare var (L I) (declare-identifier (infer-and-get-next-argument) (quote #I)))

(defmacro lvar (name value)
  (list (quote #__var) name value))
(declare lvar (L I) (declare-identifier (infer-and-get-next-argument) (quote #L)))

(defmacro defmacro (name parameters type &rest body)
  (when (not = (type-of parameters) (type-of ()))
    setq parameters (list parameters))
  (when (not = (type-of type) (type-of ()))
    setq type (list type))
  cons (quote #__defmacro) (cons name (cons parameters body)))
(declare defmacro (L L L &rest 1 I)
         (
          (var name (infer-and-get-next-argument))
          (var parameters (infer-and-get-next-argument))
          (when (not = (type-of parameters) (type-of ()))
            setq parameters (list parameters))
          (var type (infer-and-get-next-argument))
          (when (not = (type-of type) (type-of ()))
            setq type (list type))
          (declaration-scope
           (while parameters
                  var parameter car parameters
                  (unless (= (quote #&rest) parameter)
                    (declare-identifier parameter (quote #I)))
                  (setq parameters (cdr parameters)))
           (declare-identifier (quote #self) type)
           (infer-and-get-next-argument))
          (declare-identifier name type)))

(defmacro defun (name parameters &rest body) (L L &rest 1 I)
  (when (not = (type-of parameters) (type-of ()))
    setq parameters (list parameters))
  var new-parameters ()
  ;; Dump `&rest's argument.
  (()
   var p2 parameters
   (while p2
          setq new-parameters (cons (car p2) new-parameters)
          when = (car p2) (quote #&rest)
          setq p2 cdr p2
          setq p2 cdr p2))
  (()
   var np2 new-parameters
   setq new-parameters ()
   (while np2
          setq new-parameters (cons (car np2) new-parameters)
          setq np2 cdr np2))
  cons (quote #__defun) (cons name (cons new-parameters body)))
(declare defun (L L &rest 1 I)
         (
          (var name (infer-and-get-next-argument))
          (var parameters (infer-and-get-next-argument))
          (when (not = (type-of parameters) (type-of ()))
            setq parameters (list parameters))
          (var type ())
          (
           (var parameters parameters)
           (while parameters
                  (if (if (= (quote #&rest) (car parameters))
                          true
                          (= (type-of car parameters) (type-of 0)))
                      (setq type (cons car parameters type))
                      (setq type (cons (quote #I) type)))
                  (setq parameters (cdr parameters))))
          (
           (var type2 type)
           (setq type ())
           (while type2
                  (setq type (cons (car type2) type))
                  (setq type2 (cdr type2))))
          (declaration-scope
           (while parameters
                  var parameter car parameters
                  (when (when (= (type-of parameter) (type-of quote #a))
                          (not (= (quote #&rest) parameter)))
                    (declare-identifier parameter (quote #I)))
                  (setq parameters (cdr parameters)))
           (declare-identifier (quote #self) type)
           (infer-and-get-next-argument))
          (declare-identifier name type)))

(defmacro lambda (parameters &rest body) (L &rest 1 I)
  (when (not = (type-of parameters) (type-of ()))
    setq parameters (list parameters))
  var new-parameters ()
  ;; Dump `&rest's argument.
  (()
   var p2 parameters
   (while p2
          setq new-parameters (cons (car p2) new-parameters)
          when = (car p2) (quote #&rest)
          setq p2 cdr p2
          setq p2 cdr p2))
  (()
   var np2 new-parameters
   setq new-parameters ()
   (while np2
          setq new-parameters (cons (car np2) new-parameters)
          setq np2 cdr np2))
  cons (quote #__lambda) (cons new-parameters body))
(declare lambda (L &rest 1 I)
         (
          (var parameters (infer-and-get-next-argument))
          (when (not = (type-of parameters) (type-of ()))
            setq parameters (list parameters))
          (var type ())
          (
           (var parameters parameters)
           (while parameters
                  (if (if (= (quote #&rest) (car parameters))
                          true
                          (= (type-of car parameters) (type-of 0)))
                      (setq type (cons car parameters type))
                      (setq type (cons (quote #I) type)))
                  (setq parameters (cdr parameters))))
          (
           (var type2 type)
           (setq type ())
           (while type2
                  (setq type (cons (car type2) type))
                  (setq type2 (cdr type2))))
          (declaration-scope
           (while parameters
                  var parameter car parameters
                  (when (when (= (type-of parameter) (type-of quote #a))
                          (not (= (quote #&rest) parameter)))
                    (declare-identifier parameter (quote #I)))
                  (setq parameters (cdr parameters)))
           (declare-identifier (quote #self) type)
           (infer-and-get-next-argument))))

(defmacro scope (&rest body) (&rest 2 I) (cons () body))

(defmacro bothtime (&rest body) (&rest 1 I)
  (list (quote #__noscope)
        (cons (quote #__comptime)
              body)
        (cons (quote #__noscope)
              body)))

(defmacro bvar (name value) (L I)
  (funcall #bothtime (list (quote #__var) name value) ()))
(declare bvar (L I) (declare-identifier (infer-and-get-next-argument) (quote #L)))

(defmacro bdefun (name parameters &rest body) (L L &rest 1 I)
  (var defun (list (quote #defun) name parameters))
  (set-cdr (cdr (cdr defun)) body)
  (funcall #bothtime defun ()))
(declare bdefun (L L &rest 1 I)
         (
          (var name (infer-and-get-next-argument))
          (var parameters (infer-and-get-next-argument))
          (when (not = (type-of parameters) (type-of ()))
            setq parameters (list parameters))
          (var type ())
          (
           (var parameters parameters)
           (while parameters
                  (if (if (= (quote #&rest) (car parameters))
                          true
                          (= (type-of car parameters) (type-of 0)))
                      (setq type (cons car parameters type))
                      (setq type (cons (quote #I) type)))
                  (setq parameters (cdr parameters))))
          (
           (var type2 type)
           (setq type ())
           (while type2
                  (setq type (cons (car type2) type))
                  (setq type2 (cdr type2))))
          (declaration-scope
           (while parameters
                  var parameter car parameters
                  (when (when (= (type-of parameter) (type-of quote #a))
                          (not (= (quote #&rest) parameter)))
                    (declare-identifier parameter (quote #I)))
                  (setq parameters (cdr parameters)))
           (declare-identifier (quote #self) type)
           (infer-and-get-next-argument))
          (declare-identifier name type)))


bvar *epsilon* 1e-9


defmacro ' (code) (L) (list (quote #__quote) code)
bdefun cons (first second) cons first second
defmacro noscope (&rest body) (&rest 2 I) (cons ' __noscope body)
bdefun make-vector (size init) make-vector size init
bdefun get-vector-element (vector index) get-vector-element vector index
bdefun car (cons) car cons
bdefun cdr (cons) cdr cons
bdefun set-car (cons value) set-car cons value
bdefun set-cdr (cons value) set-cdr cons value
bdefun substring (string start-index end-index) substring string start-index end-index
bdefun length (sequence) length sequence
bdefun make-string (integer-sequence) make-string integer-sequence
(bdefun concatenate (first-string &rest 1 other-strings)
        (if other-strings
            (concatenate first-string (apply #self other-strings))
            first-string))
bdefun make-type () make-type
bdefun make-instance (type value-slot function-slot) (make-instance type value-slot function-slot)
bdefun composite-value (composite) (composite-value composite)
bdefun composite-function (composite) (composite-function composite)
bdefun set-composite-value (composite value) (set-composite-value composite value)
bdefun set-composite-function (composite function) (set-composite-function composite function)
bdefun null? (value) null? value
bdefun type-of (value) type-of value
bdefun not (value) not value
bdefun * (a &rest 1 b) (if b
                           * a (apply #self b)
                           a)
bdefun / (a &rest 1 b) (if b
                           / a (apply #self b)
                           a)
bdefun + (a &rest 1 b) (if b
                           + a (apply #self b)
                           a)
bdefun - (a &rest 1 b) (if b
                           - a (apply #self b)
                           a)
(bdefun = (a &rest 1 b)
        (if b
            = a (apply #self b)
            a))
bdefun < (a b) < a b
bdefun > (a b) > a b
bdefun symbol-string (symbol) symbol-string symbol

defmacro nil () () ()

bdefun 1+ (a) + a 1
bdefun 1- (a) - a 1

bdefun >= (x y) not < x y
bdefun <= (x y) not > x y
bdefun != (x y) not = x y
bdefun â‰  (x y) not = x y

(defmacro incq (variable &rest value) (L &rest 0 I)
  setq value car value
  (if value
      (list ' __setq variable (list ' __+ value variable))
      (list ' __setq variable (list ' __+ 1 variable))))

(defmacro decq (variable &rest value) (L &rest 0 I)
  setq value car value
  (if value
      (list ' __setq variable (list ' __+ value variable))
      (list ' __setq variable (list ' __- variable 1))))

(bdefun mod (a b)
        (- a (* (/ a b) b)))

(bdefun abs value
        (if < value 0
            - 0 value
            value))

(bdefun sqrt value
        var target value
        var running true
        var result 0
        var high target
        var low 0
        (while running
               var delta (- 1 (/ target (* value value)))
               (if < *epsilon* (abs delta)
                   (()
                    (if > 0 delta
                        setq low value
                        setq high value)
                    setq value (+ (/ (- high low) 2.0) low))
                   (()
                    setq result value
                    setq running false)))
        result)

bvar duckLisp-object-type-bool type-of false
bvar duckLisp-object-type-int type-of 0
bvar duckLisp-object-type-float type-of 0.0
bvar duckLisp-object-type-str type-of ""
bvar duckLisp-object-type-list type-of ()
bvar duckLisp-object-type-symbol type-of ' _
bvar duckLisp-object-type-closure type-of (lambda () ())
bvar duckLisp-object-type-vector type-of (vector)
bvar duckLisp-object-type-type type-of type-of ()

(bdefun bool? (value)
        (= (type-of value) duckLisp-object-type-bool))

(bdefun integer? (value)
        (= (type-of value) duckLisp-object-type-int))
(bdefun zero? (value) = 0 value)

(bdefun string? (value)
        (= (type-of value) duckLisp-object-type-str))

(bdefun list? (value)
        (= (type-of value) duckLisp-object-type-list))

(bdefun cons? (value)
        (= (type-of value) duckLisp-object-type-list))

(bdefun symbol? (value)
        (= (type-of value) duckLisp-object-type-symbol))

(bdefun closure? (value)
        (= (type-of value) duckLisp-object-type-closure))

(bdefun vector? (value)
        (= (type-of value) duckLisp-object-type-vector))

(bdefun type? (value)
        (= (type-of value) duckLisp-object-type-type))

(bdefun caar (x)
        (car (car x)))
(bdefun cadr (x)
        (car (cdr x)))
(bdefun cdar (x)
        (cdr (car x)))
(bdefun cddr (x)
        (cdr (cdr x)))
(bdefun caaar (x)
        (car (car (car x))))
(bdefun caadr (x)
        (car (car (cdr x))))
(bdefun cadar (x)
        (car (cdr (car x))))
(bdefun caddr (x)
        (car (cdr (cdr x))))
(bdefun cdaar (x)
        (cdr (car (car x))))
(bdefun cdadr (x)
        (cdr (car (cdr x))))
(bdefun cddar (x)
        (cdr (cdr (car x))))
(bdefun cdddr (x)
        (cdr (cdr (cdr x))))
(bdefun caaaar (x)
        (car (car (car (car x)))))
(bdefun caaadr (x)
        (car (car (car (cdr x)))))
(bdefun caadar (x)
        (car (car (cdr (car x)))))
(bdefun caaddr (x)
        (car (car (cdr (cdr x)))))
(bdefun cadaar (x)
        (car (cdr (car (car x)))))
(bdefun cadadr (x)
        (car (cdr (car (cdr x)))))
(bdefun caddar (x)
        (car (cdr (cdr (car x)))))
(bdefun cadddr (x)
        (car (cdr (cdr (cdr x)))))
(bdefun cdaaar (x)
        (cdr (car (car (car x)))))
(bdefun cdaadr (x)
        (cdr (car (car (cdr x)))))
(bdefun cdadar (x)
        (cdr (car (cdr (car x)))))
(bdefun cdaddr (x)
        (cdr (car (cdr (cdr x)))))
(bdefun cddaar (x)
        (cdr (cdr (car (car x)))))
(bdefun cddadr (x)
        (cdr (cdr (car (cdr x)))))
(bdefun cdddar (x)
        (cdr (cdr (cdr (car x)))))
(bdefun cddddr (x)
        (cdr (cdr (cdr (cdr x)))))

(bdefun first (list)
        (car list))
(bdefun second (list)
        (car (cdr list)))
(bdefun third (list)
        (car (cddr list)))
(bdefun fourth (list)
        (car (cdddr list)))
(bdefun fifth (list)
        (car (cddddr list)))
(bdefun sixth (list)
        (car (cdr (cddddr list))))
(bdefun seventh (list)
        (car (cddr (cddddr list))))
(bdefun eighth (list)
        (car (cdddr (cddddr list))))
(bdefun ninth (list)
        (car (cddddr (cddddr list))))
(bdefun tenth (list)
        (car (cdr (cddddr (cddddr list)))))

(bdefun rest (x)
        (cdr x))

(bdefun list* (&rest -1 args)
        (if (null? (rest args))
            (first args)
            (cons (first args) (apply #self (rest args)))))

(bdefun print (&rest 1 vs)
        (var vs2 vs)
        (while (not (null? vs2))
               (print (car vs2))
               (setq vs2 (cdr vs2)))
        vs)

(bdefun println (&rest 1 vs)
        (apply #print vs)
        (print "\n")
        vs)

(defmacro push (value variable) (I L)
  (list ' setq variable (list ' cons value variable)))

(defmacro pop (variable) (L)
  (list
   (list ' var ' pop-temp (list ' car variable))
   (list ' setq variable (list ' cdr variable))
   ' pop-temp))

(bdefun reverse (list)
        (var reversed-list ())
        (while (not (null? list))
               (setq reversed-list (cons (car list)
                                         reversed-list))
               pop list)
        reversed-list)
(bdefun nreverse (list) reverse list)

(bdefun min (&rest 2 values)
        (var min-value (first values))
        (pop values)
        (while (not (null? values))
               (var value (first values))
               (when (< value min-value)
                 (setq min-value value))
               (pop values))
        min-value)

(bdefun max (&rest 2 values)
        (var max-value (first values))
        (pop values)
        (while (not (null? values))
          (var value (first values))
          (when (> value max-value)
            (setq max-value value))
          (pop values))
        max-value)

(defmacro and (&rest args) (&rest 2 I)
          (if args
	          (list ' if (car args)
                      (apply #self (cdr args))
                      false)
	          true))

(defmacro or (&rest args) (&rest 2 I)
  (if args
	  (list ' if (car args)
              true
              (apply #self (cdr args)))
	  false))

(bdefun truthy-constant? (value)
        (or (= value true)
            (and (string? value) value)
            (and (integer? value) value)))
(bdefun falsy-constant? (value)
        (or (= value false)
            (and (string? value) (not value))
            (and (integer? value) (not value))))

(defun operator-and (&rest 2 args)
  var result true
  (while args
    (unless pop args
            setq result false))
  result)

(defun operator-or (&rest 2 args)
  var result false
  (while args
    (when pop args
          setq result true))
  result)

;; This is not the traditional lisp cond.
;;   (cond first-condition first-body
;;         second-condition second-body
;;         third-condition third-body
;;         â€¦ â€¦)
(defmacro cond (&rest body) (&rest -1 I)
  (if body
      (if (cdr body)
          (
           (var condition (first body))
           (if (truthy-constant? condition)
               (second body)
               (if (falsy-constant? condition)
                   (apply #self (cddr body))
                   (list ' if
                           condition
                           (second body)
                           (apply #self (cddr body))))))
          (first body))
      ()))

(defmacro switch (constant &rest body) (I &rest -1 I)
  (if body
      (if (cdr body)
          (list ' if
                  (list ' = constant (first body))
                  (second body)
                  (apply #self constant (cddr body)))
          (first body))
      ()))

(bdefun nth (n list)
        (var i 0)
        (while (< i n)
               (pop list)
               (incq i))
        (car list))

(bdefun set-nth (n list value)
        (var i 0)
        (while (< i n)
               (pop list)
               (incq i))
        (set-car list value))

(bdefun elt (sequence n)
        (cond vector? sequence
              (get-vector-element sequence n)
              (nth n sequence)))

(bdefun set-elt (sequence n value)
        (cond vector? sequence
              (set-vector-element sequence n value)
              (set-nth n sequence value)))

(bdefun last (list)
        (while (cdr list)
               (pop list))
        list)

(bdefun append (&rest 2 lists)
        (var appended-list ())
        (while lists
          var current-list pop lists
          (while (not (null? current-list))
            (setq appended-list (cons (car current-list)
                                      appended-list))
            (pop current-list)))
        (nreverse appended-list))

(bdefun remove-if* (fun list)
        (unless (null? list)
          (if (funcall fun (car list))
              (self fun (cdr list))
              (cons (car list)
                    (self fun (cdr list))))))
bdefun remove-if (fun list) remove-if* fun list

(bdefun remove-if-not* (fun list)
        (unless (null? list)
          (if (not (funcall fun (car list)))
              (self fun (cdr list))
              (cons (car list)
                    (self fun (cdr list))))))
bdefun remove-if-not (fun list) remove-if-not* fun list

(bdefun mapcar* (fun list)
        (unless (null? list)
          (cons (funcall fun (car list)) (self fun (cdr list)))))
(bdefun mapcar (fun list) mapcar* fun list)

;; Not the typical `dotimes'.
;;   (dotimes i 4
;;            (println i))
;; In the above example, the numbers 0-3 are printed.
;; `top' is only evaluated once. Returns `top'.
(defmacro dotimes (variable top &rest body) (L I &rest 1 I)
  (var top-var (gensym))
  (list
   (list ' var variable 0)
   (list ' var top-var top)
   (list ' while (list ' < variable top-var)
           (list* ' noscope body)
           (list ' incq variable))
   top-var))
(declare dotimes (L I &rest 1 I) (declare-identifier (infer-and-get-next-argument) (quote #I)))

;; Like `dolist`, but for generic sequences.
;;   (dosequence i (list 1 2 3)
;;               (println i))
;; In the above example, the numbers 1-3 are printed.
;; Returns the sequence. It is only evaluated once.
(defmacro dosequence (variable sequence &rest body) (L I &rest 1 I)
  (var sequence-var (gensym))
  (var return-var (gensym))
  (list
   (list (' var) sequence-var sequence)
   (list (' var) return-var sequence)
   (list (' var) variable ())
   (list (' while) (list (' not) (list (' null?) sequence-var))
         (list (' setq) variable (list (' car) sequence-var))
         (apply #noscope
                body)
         (list ' setq sequence-var (list ' cdr sequence-var)))
   return-var))
(declare dosequence (L I &rest 1 I) (declare-identifier (infer-and-get-next-argument) (quote #I)))

;; Not the typical `dolist'.
;;   (dolist i (list 1 2 3)
;;           (println i))
;; In the above example, the numbers 1-3 are printed.
;; Returns the list. It is only evaluated once.
(defmacro dolist (variable sequence &rest body) (L I &rest 1 I)
  (apply #dosequence variable sequence body))
(declare dolist (L I &rest 1 I) (declare-identifier (infer-and-get-next-argument) (quote #I)))



;; Semi-functional quasiquote. Vectors and composites are not fully implemented. Better error checking is needed.
;; Nested quasiquotes don't work properly.
;; ",", and ",@" need to be called as functions in order to match properly.
(defmacro quasiquote (form) (I)
  (switch (type-of form)
    duckLisp-object-type-list (when form
                                (
                                 (var sub-form (car form))
                                 (if (list? sub-form)
                                     (switch (car sub-form)
                                       ' , (list ' cons (cadr sub-form) (self (cdr form)))
                                       ' ,@ (list ' append
                                                    (cadr sub-form)
                                                    (self (cdr form)))
                                       (list ' cons (self (car form)) (self (cdr form))))
                                     (list ' cons (self (car form)) (self (cdr form))))))
    duckLisp-object-type-symbol (list ' quote form)
    duckLisp-object-type-closure (list ' error "`: Cannot quote closure object")
    duckLisp-object-type-vector (list ' quote form)
    duckLisp-object-type-type (list ' error "`: Cannot quote type object")
    form))
(declare quasiquote (I)
         (declaration-scope
          (declare-identifier (quote #,) (quote #I))
          (declare-identifier (quote #,@) (quote #I))
          infer-and-get-next-argument))
;; See above description of the backtick character.
(defmacro ` (form) (I) (funcall #quasiquote form))
(declare ` (I)
           (declaration-scope
            (declare-identifier (quote #,) (quote #(I)))
            (declare-identifier (quote #,@) (quote #(I)))
            infer-and-get-next-argument))


(defmacro until (condition &rest body) (I &rest 1 I)
  ` (while (not , condition) ,@ body))


(comptime
 (defun gensym (&rest -1 name)
   (if name
       (intern (concatenate car name (gensym)))
       (gensym)))
 ())


(comptime
 (defun extend-set (pattern body)
   var lvalue cadr pattern
   var value-name caddr pattern
   var function-name car lvalue
   var function-args cdr lvalue
   #(` (__defmacro
        (, (intern (concatenate "__set-" function-name)))
        ((,@ function-args) (, value-name))
        (,@ body))))
 (defun extend-inc (pattern body)
   var lvalue cadr pattern
   var value-name caddr pattern
   var function-name car lvalue
   var function-args cdr lvalue
   #(` (__defmacro
        (, (intern (concatenate "__inc-" function-name)))
        ((,@ function-args) (, value-name))
        (,@ body))))
 ())


(defmacro extend (pattern &rest body) (L &rest 1 I)
  var function-name car pattern
  (funcall (switch function-name
             ' set  #extend-set
             ' inc  #extend-inc
             ` __error "extend: Unknown extendable function.")
           pattern
           body))


;; `setf' in most lisps.
;; var l (list 1 2 3)
;; set (elt l 1) 5
;; l  ; => (1 5 3)
;; Bug: Evaluates lvalue then rvalue.
(defmacro set (lvalue value) (I I)
  (switch type-of lvalue
    duckLisp-object-type-symbol
    ` setq (, lvalue) (, value)
    duckLisp-object-type-list
    (()
     var function-name first lvalue
     var function-args rest lvalue

     ` ((, (intern (concatenate "__set-" function-name))) ,@ function-args , value))
    ` __error "set: lvalue may only be a symbol or an expression."))

#(extend (set (car sequence) value)
         (` (set-car (, sequence) (, value))))
#(extend (set (cdr sequence) value)
  (` (set-cdr (, sequence) (, value))))
#(extend (set (elt sequence index) value)
  (` (set-elt (, sequence) (, index) (, value))))
#(extend (set (composite-value composite) value)
  (` (set-composite-value (, composite) (, value))))
#(extend (set (composite-function composite) value)
  (` (set-composite-function (, composite) (, value))))

;; var l (list 1 2 3)
;; inc (elt l 1)
;; l  ; => (1 3 3)
;; Bug: Evaluates lvalue then rvalue.
(defmacro inc (lvalue &rest rvalue) (I &rest 0 I)
          var increment  if (null? rvalue) 1 (car rvalue)
          (switch type-of lvalue
                  duckLisp-object-type-symbol
                  ` (incq (, lvalue) (, increment))
                  duckLisp-object-type-list
                  (()
                   var function-name first lvalue
                   var function-args rest lvalue

                   ` ((, (intern (concatenate "__inc-" function-name))) ,@ function-args , increment))
                  ` __error "inc: lvalue may only be a symbol or an expression."))

(defun inc-car (lvalue &rest 0 rvalue)
  var increment  if (null? rvalue) 1 (car rvalue)
  set car lvalue  + increment car lvalue)
(defun inc-cdr (lvalue &rest 0 rvalue)
  var increment  if (null? rvalue) 1 (car rvalue)
  set cdr lvalue  + increment cdr lvalue)
(defun inc-elt (lvalue index &rest 0 rvalue)
  var increment  if (null? rvalue) 1 (car rvalue)
  set (elt lvalue index) + increment (elt lvalue index))

#(extend (inc (car sequence) value)
         (` (inc-car (, sequence) (, value))))
#(extend (inc (cdr sequence) value)
         (` (inc-cdr (, sequence) (, value))))
#(extend (inc (elt sequence index) value)
         (` (inc-elt (, sequence) (, index) (, value))))


;; Define a class.
;; (defclass table (x y)
;;   var v make-vector (* x y) nil
;;   make-instance table-type (vector v x y) nil)
;; This will define the following:
;;   the type `table-type';
;;   the type checking function `table?';
;;   the constructor `table'.
;; The name, parameters, and body define the constructor.
(defmacro defclass (name parameters &rest body) (L L &rest 1 I)
          var v (gensym "v")
          ` #(noscope
              (var (, (intern (concatenate name "-type"))) (make-type))
              (defun (, (intern (concatenate name "?"))) ((, v))
                (= (, (intern (concatenate name "-type"))) (type-of (, v))))
              (defun (, name) (, parameters)
                (,@ body))))
(declare defclass (L L &rest 1 I)
         (
          (var name (infer-and-get-next-argument))
          (var parameters (infer-and-get-next-argument))
          (when (not = (type-of parameters) (type-of ()))
            setq parameters (list parameters))
          ;; Declare type.
          (declare-identifier (concatenate name "-type") (quote #I))
          ;; Declare type checking function.
          (declare-identifier (concatenate name "?") (quote #(I)))
          ;; Declare constructor.
          (var type ())
          (
           (var parameters parameters)
           (while parameters
                  (if (if (= (quote #&rest) (car parameters))
                          true
                          (= (type-of car parameters) (type-of 0)))
                      (setq type (cons car parameters type))
                      (setq type (cons (quote #I) type)))
                  (setq parameters (cdr parameters))))
          (
           (var type2 type)
           (setq type ())
           (while type2
                  (setq type (cons (car type2) type))
                  (setq type2 (cdr type2))))
          (declaration-scope
           (while parameters
                  var parameter car parameters
                  (when (when (= (type-of parameter) (type-of quote #a))
                          (not (= (quote #&rest) parameter)))
                    (declare-identifier parameter (quote #I)))
                  (setq parameters (cdr parameters)))
           (declare-identifier (quote #self) type)
           (infer-and-get-next-argument))
          (declare-identifier name type)))


;; Define all names passed to this macro as local variables, with the integer value of each variable being one greater
;; than the previous, starting from 0.
(defmacro enum (&rest identifiers) (&rest -1 L)
  var defs ` (noscope)
  var number 0
  (dolist identifier identifiers
    push ` (#var , identifier , number) defs
    incq number)
  reverse defs)
(declare enum (&rest -1 L)
         (()
          var identifiers (infer-and-get-next-argument)
          (while identifiers
                 declare-identifier (car identifiers) quote #I
                 setq identifiers cdr identifiers)))


;; `mset', because `set' is taken for assignment. Maybe I should have called `set' `assign' like Verilog does?
(defclass mset (&rest -1 elements) nil)

(defun mset-to-list (mset)
  composite-value mset)

(defun sequence-element? (sequence value)
  var element? false
  (dosequence element sequence
              (when = element value
                    set element? true))
  element?)

(defun element? (sequence value)
  sequence-element? sequence value)

(defun mset-= (&rest 2 sets) nil)

(defun element? (object value)
  (if mset? object
      (()
       var list composite-value object
       var element? false
       (dolist element list
               (when mset-= element value
                     set element? true))
       element?)
      element? object value))

(defun mset-length (set)
  length composite-value set)

(defun length (object)
  (if mset? object
      mset-length object
      length object))

(defun = (&rest 2 sets)
  (if (apply #operator-and (mapcar #mset? sets))
      (if (apply #= (mapcar #length sets))
          (()
           var equal true
           var first-set pop sets
           (dolist element  composite-value first-set
                   (unless (apply #operator-and (mapcar (lambda mset  element? mset element) sets))
                     set equal false))
           equal)
          false)
      (apply #= sets)))
set #mset-= #=

(defun mset-remove-duplicates (elements)
  var new-list nil
  (while elements
    var element car elements
    var purged true
    (while purged
      set purged false
      var last-cons elements
      var tail-elements cdr elements
      (while tail-elements
        (when = element (car tail-elements)
              set (cdr last-cons) (cdr tail-elements)
              set purged true)
        pop tail-elements
        pop last-cons))
    push pop elements new-list)
  new-list)

set #mset (lambda (&rest -1 elements)
            make-instance mset-type (mset-remove-duplicates elements) nil)


(defun union (&rest 2 sets)
  (when (apply #operator-and (mapcar #mset? sets))
    (apply #mset (apply #append (mapcar #composite-value sets)))))

(defun intersection (&rest 2 sets)
  (when (apply #operator-and (mapcar #mset? sets))
    var last-filtered-list pop sets
    (dolist mset sets
            var new-filtered-list nil
            (dolist element  composite-value mset
                    (when element? last-filtered-list element
                          push element new-filtered-list))
            set last-filtered-list new-filtered-list)
    (apply #mset last-filtered-list)))

(defun list-pretty-format (pretty-format list)
  var list-string ""
  var first true
  (dolist element list
          (unless first
            set list-string concatenate list-string " ")
          set list-string concatenate list-string  (funcall #pretty-format element)
          set first false)
  (concatenate "(" list-string ")"))

(defun integer-pretty-format integer
  (make-string (list (elt "0123456789" integer))))

(defun pretty-format (object)
  (cond
   list? object  list-pretty-format #self object
   integer? object  integer-pretty-format object
   object))

(defun mset-pretty-format (mset)
  var list composite-value mset
  var list-string ""
  var first true
  (dolist element list
          (unless first
            set list-string concatenate list-string " ")
          set list-string concatenate list-string (if mset? element
                                                      self element
                                                      pretty-format element)
          set first false)
  (concatenate "{" list-string "}"))

(defun pretty-format (object)
  (if mset? object
      mset-pretty-format object
      pretty-format object))

(defun println (&rest 1 values)
  set values (mapcar (lambda value
                       (if mset? value
                           mset-pretty-format value
                           value))
                     values)
  (apply #println values))



comptime println "</comptime library.hna>"
println "</library.hna>"

;; If we are going to pause anywhere, this is the place
garbage-collect
